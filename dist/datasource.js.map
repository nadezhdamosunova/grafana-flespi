{"version":3,"sources":["../src/datasource.js"],"names":["_","FlespiDatasource","instanceSettings","$q","backendSrv","templateSrv","type","jsonData","undefined","url","uri","headers","token","name","q","options","console","log","JSON","stringify","query","buildQueryParameters","targets","filter","t","hide","length","target","parameter","when","data","svc_name","parameters","replace","from","parseInt","Date","parse","range","to","interval_sec","scopedVars","__interval_ms","value","request_params","max_count","maxDataPoints","fields","left_key","right_key","generalize","doRequest","method","then","response","result","dict","params","split","i","datapoints","item_params","param","push","key","status","message","title","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","res","label","text","indexOf","j","withCredentials","datasourceRequest","map","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class FlespiDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    if (instanceSettings.jsonData != undefined) {\n        this.url = instanceSettings.jsonData.uri;\n        this.headers = {'Authorization': 'FlespiToken ' + instanceSettings.jsonData.token};\n    } else {\n        this.url = \"\";\n        this.headers = {};\n    }\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n// -----------------------------------\n// query metrics values and convert into timeseries\n// -----------------------------------\nquery(options) {\n    console.log(\"before: \" + JSON.stringify(options))\n    var query = this.buildQueryParameters(options);\n    console.log(\"in the middle: \" + JSON.stringify(query))\n    query.targets = query.targets.filter(t => !t.hide);\n    console.log(\"after: \" + JSON.stringify(query))\n\n    if (query.targets == null || query.targets.length <= 0 || !query.targets[0].target || !query.targets[0].parameter) {\n    return this.q.when({data: []});\n    }\n    // prepare params for request\n    var svc_name = query.targets[0].target;\n    var parameters = query.targets[0].parameter.replace(/[{})]/g, '');\n    var from = parseInt(Date.parse(query.range.from) / 1000);\n    var to = parseInt(Date.parse(query.range.to) / 1000);\n    var interval_sec = query.scopedVars.__interval_ms.value / 1000;\n\n    var request_params = {max_count: query.maxDataPoints, fields: parameters, left_key: from, right_key : to}\n    if (interval_sec >= 60) {\n    request_params.generalize = interval_sec;\n    }\n\n    return this.doRequest({\n    url: this.url + '/containers/name=' + svc_name + '|*/messages?data=' + JSON.stringify(request_params),\n    method: 'GET'\n    }).then(response => {\n    var data = [];\n    if (!response.data.result || response.data.result.length == 0) {\n    return {data: data};\n    }\n    // create object to store response data\n    var dict = {}\n    var params = parameters.split(',')\n    for (var i = 0; i < params.length; i++) {\n    var target = { target: params[i], datapoints: []};\n    dict[params[i]] = target;\n    }\n    // parse response\n    for (var i = 0; i < response.data.result.length; i++) {\n    // for each item in `result` array\n    var item_params = response.data.result[i].params;\n    for (var param in item_params) {\n    var target = dict[param]\n    target.datapoints.push([item_params[param], parseInt(response.data.result[i].key * 1000)]);\n    }\n    }\n    // format object to send query result\n    for (var param in dict) {\n    data.push(dict[param]);\n    }\n\n    return {data: data};\n    });\n}\n// -----------------------------------\n// check connection to datasource\n// -----------------------------------\ntestDatasource() {\n    return this.doRequest({\n        url: this.url + '/containers/all',\n        method: 'GET',\n    }).then(response => {\n        if (response.status === 200) {\n            return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n        }\n    });\n}\n// -----------------------------------\n// query annotations from the datasource\n// -----------------------------------\nannotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n        range: options.range,\n        annotation: {\n            name: options.annotation.name,\n            datasource: options.annotation.datasource,\n            enable: options.annotation.enable,\n            iconColor: options.annotation.iconColor,\n            query: query\n        },\n        rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n        url: this.url + '/annotations',\n        method: 'POST',\n        data: annotationQuery\n    }).then(result => {\n        return result.data;\n    });\n}\n\n// -----------------------------------\n// query possible metrics for the datasource\n// -----------------------------------\nmetricFindQuery(query) {\n    query = this.templateSrv.replace(query, null, 'glob')\n    console.log(query)\n// --- fetch all services\n    if (query == \"services.*\") {\n        return this.doRequest({\n            url: this.url + '/containers/all',\n            method: 'GET',\n        }).then(response => {\n            const res = [];\n            const data = response.data.result;\n            for (var i = 0; i < data.length; i++) {\n                var label;\n                if (data[i].name == undefined || data[i].name == null) {\n                    continue\n                } else {\n                    var svc_name = data[i].name.split('|')\n                    label = svc_name[0];\n                }\n                res.push({value: label, text: label})\n            }\n            return res;\n        });\n    }\n// --- fetch parameters for services\n    if (query.indexOf(\".params.*\") !== -1) {\n        var svc_name = query.split('.')[0]\n        console.log(\"++++++++++++ \" + svc_name)\n        return this.doRequest({\n            url: this.url + '/containers/name=' + svc_name + '*?fields=parameters',\n            method: 'GET',\n        }).then(response => {\n            const res = [];\n            const data = response.data.result;\n\n            for (let i = 0; i < data.length; i++) {\n                var parameters = data[i].parameters;\n                for (let j = 0; j < parameters.length; j++) {\n                    res.push({value: parameters[j], text: parameters[j]});\n                }\n            }\n            return res;\n        });\n    }\n// --- unknown metric query\n    return this.doRequest({\n           url: this.url + '/containers/all',\n           method: 'GET',\n    }).then(metrics => {\n        return { status: \"success\", message: \"Only `services` and `params` queries are supported\", title: \"Choose query\" };\n    });\n  }\n\n// -----------------------------------\n// helper functions\n// -----------------------------------\ndoRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n}\n\nbuildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n        return target.target !== 'select metric';\n    });\n\n    options.targets = _.filter(options.targets, target => {\n        return target.parameter !== 'select parameter';\n    });\n\n    var targets = _.map(options.targets, target => {\n        return {\n            target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n            refId: target.refId,\n            hide: target.hide,\n            parameter: this.templateSrv.replace(target.parameter, options.scopedVars, 'glob')\n        };\n    });\n    options.targets = targets;\n    return options;\n}\n\n}\n"]}