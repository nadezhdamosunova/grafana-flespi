{"version":3,"sources":["../src/datasource.js"],"names":["_","FlespiDatasource","instanceSettings","$q","backendSrv","templateSrv","type","jsonData","undefined","url","uri","headers","token","name","q","options","console","log","JSON","stringify","query","buildQueryParameters","targets","filter","t","hide","length","target","parameter","when","data","container_id","parameters","replace","from","parseInt","Date","parse","range","to","interval_sec","scopedVars","__interval_ms","value","request_params","max_count","maxDataPoints","fields","left_key","right_key","generalize","doRequest","method","then","response","result","dict","params","split","i","datapoints","item_params","param","push","key","status","message","title","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","res","label","id","text","j","withCredentials","datasourceRequest","map","refId"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;;;;;;;;;;;;;;;;;;;;kCAEMC,gB;AAEX,kCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,eAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,cAAIJ,iBAAiBK,QAAjB,IAA6BC,SAAjC,EAA4C;AACxC,iBAAKC,GAAL,GAAWP,iBAAiBK,QAAjB,CAA0BG,GAArC;AACA,iBAAKC,OAAL,GAAe,EAAC,iBAAiB,iBAAiBT,iBAAiBK,QAAjB,CAA0BK,KAA7D,EAAf;AACH,WAHD,MAGO;AACH,iBAAKH,GAAL,GAAW,EAAX;AACA,iBAAKE,OAAL,GAAe,EAAf;AACH;AACD,eAAKE,IAAL,GAAYX,iBAAiBW,IAA7B;AACA,eAAKC,CAAL,GAASX,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACD;;;;gCAEKU,O,EAAS;AACbC,oBAAQC,GAAR,CAAY,aAAaC,KAAKC,SAAL,CAAeJ,OAAf,CAAzB;AACA,gBAAIK,QAAQ,KAAKC,oBAAL,CAA0BN,OAA1B,CAAZ;AACAC,oBAAQC,GAAR,CAAY,oBAAoBC,KAAKC,SAAL,CAAeC,KAAf,CAAhC;AACAA,kBAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,MAAd,CAAqB;AAAA,qBAAK,CAACC,EAAEC,IAAR;AAAA,aAArB,CAAhB;AACAT,oBAAQC,GAAR,CAAY,YAAYC,KAAKC,SAAL,CAAeC,KAAf,CAAxB;;AAEA,gBAAIA,MAAME,OAAN,IAAiB,IAAjB,IAAyBF,MAAME,OAAN,CAAcI,MAAd,IAAwB,CAAjD,IAAsD,CAACN,MAAME,OAAN,CAAc,CAAd,EAAiBK,MAAxE,IAAkF,CAACP,MAAME,OAAN,CAAc,CAAd,EAAiBM,SAAxG,EAAmH;AACjH,qBAAO,KAAKd,CAAL,CAAOe,IAAP,CAAY,EAACC,MAAM,EAAP,EAAZ,CAAP;AACD;AACD;AACA,gBAAIC,eAAeX,MAAME,OAAN,CAAc,CAAd,EAAiBK,MAApC;AACA,gBAAIK,aAAaZ,MAAME,OAAN,CAAc,CAAd,EAAiBM,SAAjB,CAA2BK,OAA3B,CAAmC,QAAnC,EAA6C,EAA7C,CAAjB;AACA,gBAAIC,OAAOC,SAASC,KAAKC,KAAL,CAAWjB,MAAMkB,KAAN,CAAYJ,IAAvB,IAA+B,IAAxC,CAAX;AACA,gBAAIK,KAAKJ,SAASC,KAAKC,KAAL,CAAWjB,MAAMkB,KAAN,CAAYC,EAAvB,IAA6B,IAAtC,CAAT;AACA,gBAAIC,eAAepB,MAAMqB,UAAN,CAAiBC,aAAjB,CAA+BC,KAA/B,GAAuC,IAA1D;;AAEA,gBAAIC,iBAAiB,EAACC,WAAWzB,MAAM0B,aAAlB,EAAiCC,QAAQf,UAAzC,EAAqDgB,UAAUd,IAA/D,EAAqEe,WAAYV,EAAjF,EAArB;AACA,gBAAIC,gBAAgB,EAApB,EAAwB;AACpBI,6BAAeM,UAAf,GAA4BV,YAA5B;AACH;;AAED,mBAAO,KAAKW,SAAL,CAAe;AACpB1C,mBAAK,KAAKA,GAAL,GAAW,cAAX,GAA4BsB,YAA5B,GAA2C,iBAA3C,GAA+Db,KAAKC,SAAL,CAAeyB,cAAf,CADhD;AAEpBQ,sBAAQ;AAFY,aAAf,EAGJC,IAHI,CAGC,oBAAY;AAChB,kBAAIvB,OAAO,EAAX;AACA,kBAAI,CAACwB,SAASxB,IAAT,CAAcyB,MAAf,IAAyBD,SAASxB,IAAT,CAAcyB,MAAd,CAAqB7B,MAArB,IAA+B,CAA5D,EAA+D;AAC7D,uBAAO,EAACI,MAAMA,IAAP,EAAP;AACD;AACD;AACA,kBAAI0B,OAAO,EAAX;AACA,kBAAIC,SAASzB,WAAW0B,KAAX,CAAiB,GAAjB,CAAb;AACA,mBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,OAAO/B,MAA3B,EAAmCiC,GAAnC,EAAwC;AACtC,oBAAIhC,SAAS,EAAEA,QAAQ8B,OAAOE,CAAP,CAAV,EAAqBC,YAAY,EAAjC,EAAb;AACAJ,qBAAKC,OAAOE,CAAP,CAAL,IAAkBhC,MAAlB;AACD;AACD;AACA,mBAAK,IAAIgC,IAAI,CAAb,EAAgBA,IAAIL,SAASxB,IAAT,CAAcyB,MAAd,CAAqB7B,MAAzC,EAAiDiC,GAAjD,EAAsD;AACpD;AACA,oBAAIE,cAAcP,SAASxB,IAAT,CAAcyB,MAAd,CAAqBI,CAArB,EAAwBF,MAA1C;AACA,qBAAK,IAAIK,KAAT,IAAkBD,WAAlB,EAA+B;AAC7B,sBAAIlC,SAAS6B,KAAKM,KAAL,CAAb;AACAnC,yBAAOiC,UAAP,CAAkBG,IAAlB,CAAuB,CAACF,YAAYC,KAAZ,CAAD,EAAqB3B,SAASmB,SAASxB,IAAT,CAAcyB,MAAd,CAAqBI,CAArB,EAAwBK,GAAxB,GAA8B,IAAvC,CAArB,CAAvB;AACD;AACF;AACD;AACA,mBAAK,IAAIF,KAAT,IAAkBN,IAAlB,EAAwB;AACtB1B,qBAAKiC,IAAL,CAAUP,KAAKM,KAAL,CAAV;AACD;;AAED,qBAAO,EAAChC,MAAMA,IAAP,EAAP;AACD,aA9BI,CAAP;AA+BD;;;2CAEgB;AACf,mBAAO,KAAKqB,SAAL,CAAe;AACpB1C,mBAAK,KAAKA,GAAL,GAAW,iBADI;AAEpB2C,sBAAQ;AAFY,aAAf,EAGJC,IAHI,CAGC,oBAAY;AAClB,kBAAIC,SAASW,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAO,EAAEA,QAAQ,SAAV,EAAqBC,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAP;AACD;AACF,aAPM,CAAP;AAQD;;;0CAEepD,O,EAAS;AACvB,gBAAIK,QAAQ,KAAKf,WAAL,CAAiB4B,OAAjB,CAAyBlB,QAAQqD,UAAR,CAAmBhD,KAA5C,EAAmD,EAAnD,EAAuD,MAAvD,CAAZ;AACA,gBAAIiD,kBAAkB;AACpB/B,qBAAOvB,QAAQuB,KADK;AAEpB8B,0BAAY;AACVvD,sBAAME,QAAQqD,UAAR,CAAmBvD,IADf;AAEVyD,4BAAYvD,QAAQqD,UAAR,CAAmBE,UAFrB;AAGVC,wBAAQxD,QAAQqD,UAAR,CAAmBG,MAHjB;AAIVC,2BAAWzD,QAAQqD,UAAR,CAAmBI,SAJpB;AAKVpD,uBAAOA;AALG,eAFQ;AASpBqD,wBAAU1D,QAAQ0D;AATE,aAAtB;;AAYA,mBAAO,KAAKtB,SAAL,CAAe;AACpB1C,mBAAK,KAAKA,GAAL,GAAW,cADI;AAEpB2C,sBAAQ,MAFY;AAGpBtB,oBAAMuC;AAHc,aAAf,EAIJhB,IAJI,CAIC,kBAAU;AAChB,qBAAOE,OAAOzB,IAAd;AACD,aANM,CAAP;AAOD;;;0CAEeV,K,EAAO;AACrB,gBAAIA,SAAS,YAAb,EAA2B;AACzB,qBAAO,KAAK+B,SAAL,CAAe;AACpB1C,qBAAK,KAAKA,GAAL,GAAW,iBADI;AAEpB2C,wBAAQ;AAFY,eAAf,EAGJC,IAHI,CAGC,oBAAY;AAClB,oBAAMqB,MAAM,EAAZ;AACA,oBAAM5C,OAAOwB,SAASxB,IAAT,CAAcyB,MAA3B;AACA,qBAAK,IAAII,IAAI,CAAb,EAAgBA,IAAI7B,KAAKJ,MAAzB,EAAiCiC,GAAjC,EAAsC;AACpC,sBAAIgB,KAAJ;AACA,sBAAI7C,KAAK6B,CAAL,EAAQ9C,IAAR,IAAgBL,SAAhB,IAA6BsB,KAAK6B,CAAL,EAAQ9C,IAAR,IAAgB,IAAjD,EAAuD;AACrD8D,4BAAQ7C,KAAK6B,CAAL,EAAQiB,EAAhB;AACD,mBAFD,MAEO;AACLD,4BAAQ7C,KAAK6B,CAAL,EAAQ9C,IAAR,GAAe,IAAf,GAAsBiB,KAAK6B,CAAL,EAAQiB,EAA9B,GAAmC,GAA3C;AACD;AACDF,sBAAIX,IAAJ,CAAS,EAACpB,OAAOb,KAAK6B,CAAL,EAAQiB,EAAhB,EAAoBC,MAAMF,KAA1B,EAAT;AACD;AACD,uBAAOD,GAAP;AACD,eAhBM,CAAP;AAiBD;AACD,gBAAItD,SAAS,YAAb,EAA2B;AACzB,qBAAO,KAAK+B,SAAL,CAAe;AACpB1C,qBAAK,KAAKA,GAAL,GAAW,mCADI;AAEpB2C,wBAAQ;AAFY,eAAf,EAGJC,IAHI,CAGC,oBAAY;AAClB,oBAAMqB,MAAM,EAAZ;AACA,oBAAM5C,OAAOwB,SAASxB,IAAT,CAAcyB,MAA3B;;AAEA,qBAAK,IAAII,IAAI,CAAb,EAAgBA,IAAI7B,KAAKJ,MAAzB,EAAiCiC,GAAjC,EAAsC;AACpC,sBAAI3B,aAAaF,KAAK6B,CAAL,EAAQ3B,UAAzB;AACE,uBAAK,IAAI8C,IAAI,CAAb,EAAgBA,IAAI9C,WAAWN,MAA/B,EAAuCoD,GAAvC,EAA4C;AAC1CJ,wBAAIX,IAAJ,CAAS,EAACpB,OAAOX,WAAW8C,CAAX,CAAR,EAAuBD,MAAM7C,WAAW8C,CAAX,CAA7B,EAAT;AACD;AACJ;AACD,uBAAOJ,GAAP;AACD,eAdM,CAAP;AAeA,qBAAO,EAAET,QAAQ,SAAV,EAAqBC,SAAS,0DAA9B,EAA0FC,OAAO,cAAjG,EAAP;AACD;AACF;;;oCAESpD,O,EAAS;AACjBA,oBAAQgE,eAAR,GAA0B,KAAKA,eAA/B;AACAhE,oBAAQJ,OAAR,GAAkB,KAAKA,OAAvB;;AAEA,mBAAO,KAAKP,UAAL,CAAgB4E,iBAAhB,CAAkCjE,OAAlC,CAAP;AACD;;;+CAEoBA,O,EAAS;AAAA;;AAC5B;AACAA,oBAAQO,OAAR,GAAkBtB,EAAEuB,MAAF,CAASR,QAAQO,OAAjB,EAA0B,kBAAU;AACpD,qBAAOK,OAAOA,MAAP,KAAkB,eAAzB;AACD,aAFiB,CAAlB;;AAIAZ,oBAAQO,OAAR,GAAkBtB,EAAEuB,MAAF,CAASR,QAAQO,OAAjB,EAA0B,kBAAU;AACpD,qBAAOK,OAAOC,SAAP,KAAqB,kBAA5B;AACD,aAFiB,CAAlB;;AAIA,gBAAIN,UAAUtB,EAAEiF,GAAF,CAAMlE,QAAQO,OAAd,EAAuB,kBAAU;AAC7C,qBAAO;AACLK,wBAAQ,OAAOA,OAAOA,MAAd,IAAwB,QAAxB,GAAmC,MAAKtB,WAAL,CAAiB4B,OAAjB,CAAyBN,OAAOA,MAAhC,EAAwCZ,QAAQ0B,UAAhD,EAA4D,OAA5D,CAAnC,GAA0Gd,OAAOA,MADpH;AAELuD,uBAAOvD,OAAOuD,KAFT;AAGLzD,sBAAME,OAAOF,IAHR;AAILG,2BAAW,MAAKvB,WAAL,CAAiB4B,OAAjB,CAAyBN,OAAOC,SAAhC;AAJN,eAAP;AAMD,aAPa,CAAd;;AASAb,oBAAQO,OAAR,GAAkBA,OAAlB;;AAEA,mBAAOP,OAAP;AACD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class FlespiDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    if (instanceSettings.jsonData != undefined) {\n        this.url = instanceSettings.jsonData.uri;\n        this.headers = {'Authorization': 'FlespiToken ' + instanceSettings.jsonData.token};\n    } else {\n        this.url = \"\";\n        this.headers = {};\n    }\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    console.log(\"before: \" + JSON.stringify(options))\n    var query = this.buildQueryParameters(options);\n    console.log(\"in the middle: \" + JSON.stringify(query))\n    query.targets = query.targets.filter(t => !t.hide);\n    console.log(\"after: \" + JSON.stringify(query))\n\n    if (query.targets == null || query.targets.length <= 0 || !query.targets[0].target || !query.targets[0].parameter) {\n      return this.q.when({data: []});\n    }\n    // prepare params for request\n    var container_id = query.targets[0].target;\n    var parameters = query.targets[0].parameter.replace(/[{})]/g, '');\n    var from = parseInt(Date.parse(query.range.from) / 1000);\n    var to = parseInt(Date.parse(query.range.to) / 1000);\n    var interval_sec = query.scopedVars.__interval_ms.value / 1000;\n\n    var request_params = {max_count: query.maxDataPoints, fields: parameters, left_key: from, right_key : to}\n    if (interval_sec >= 60) {\n        request_params.generalize = interval_sec;\n    }\n\n    return this.doRequest({\n      url: this.url + '/containers/' + container_id + '/messages?data=' + JSON.stringify(request_params),\n      method: 'GET'\n    }).then(response => {\n        var data = [];\n        if (!response.data.result || response.data.result.length == 0) {\n          return {data: data};\n        }\n        // create object to store response data\n        var dict = {}\n        var params = parameters.split(',')\n        for (var i = 0; i < params.length; i++) {\n          var target = { target: params[i], datapoints: []};\n          dict[params[i]] = target;\n        }\n        // parse response\n        for (var i = 0; i < response.data.result.length; i++) {\n          // for each item in `result` array\n          var item_params = response.data.result[i].params;\n          for (var param in item_params) {\n            var target = dict[param]\n            target.datapoints.push([item_params[param], parseInt(response.data.result[i].key * 1000)]);\n          }\n        }\n        // format object to send query result\n        for (var param in dict) {\n          data.push(dict[param]);\n        }\n\n        return {data: data};\n      });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/containers/all',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    if (query == \"containers\") {\n      return this.doRequest({\n        url: this.url + '/containers/all',\n        method: 'GET',\n      }).then(response => {\n        const res = [];\n        const data = response.data.result;\n        for (var i = 0; i < data.length; i++) {\n          var label;\n          if (data[i].name == undefined || data[i].name == null) {\n            label = data[i].id;\n          } else {\n            label = data[i].name + ' (' + data[i].id + ')';\n          }\n          res.push({value: data[i].id, text: label});\n        }\n        return res;\n      });\n    }\n    if (query == \"parameters\") {\n      return this.doRequest({\n        url: this.url + '/containers/all?fields=parameters',\n        method: 'GET',\n      }).then(response => {\n        const res = [];\n        const data = response.data.result;\n\n        for (let i = 0; i < data.length; i++) {\n          var parameters = data[i].parameters;\n            for (let j = 0; j < parameters.length; j++) {\n              res.push({value: parameters[j], text: parameters[j]});\n            }\n        }\n        return res;\n      });\n      return { status: \"success\", message: \"Only `containers` and `parameters` queries are supported\", title: \"Choose query\" };\n    }\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    options.targets = _.filter(options.targets, target => {\n      return target.parameter !== 'select parameter';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: typeof target.target == \"string\" ? this.templateSrv.replace(target.target, options.scopedVars, 'regex') : target.target,\n        refId: target.refId,\n        hide: target.hide,\n        parameter: this.templateSrv.replace(target.parameter)\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}