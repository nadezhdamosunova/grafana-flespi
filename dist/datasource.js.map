{"version":3,"sources":["../src/datasource.js"],"names":["_","FlespiDatasource","instanceSettings","$q","backendSrv","templateSrv","type","jsonData","undefined","url","uri","headers","token","name","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","container_id","target","parameters","parameter","replace","params","split","from","parseInt","Date","parse","range","to","fields","i","request_params","max_count","maxDataPoints","left_key","right_key","doRequest","JSON","stringify","method","then","response","result","dict","datapoints","item_params","param","push","time","status","message","title","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","res","label","id","value","text","j","withCredentials","datasourceRequest","map","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class FlespiDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    if (instanceSettings.jsonData != undefined) {\n        this.url = instanceSettings.jsonData.uri;\n        this.headers = {'Authorization': 'FlespiToken ' + instanceSettings.jsonData.token};\n    } else {\n        this.url = \"\";\n        this.headers = {};\n    }\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets == null || query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n    // prepare params for request\n    var container_id = query.targets[0].target;\n    var parameters = query.targets[0].parameter.replace(/[\\(\\)]/g, '');\n    var params = parameters.split('|');\n    var from = parseInt(Date.parse(query.range.from) / 1000);\n    var to = parseInt(Date.parse(query.range.to) / 1000);\n    var fields = \"time\";\n    for (var i = 0; i < params.length; i++) {\n      fields = fields + \",\" + params[i];\n    }\n    var request_params = {max_count: query.maxDataPoints, fields: fields, left_key: from, right_key : to}\n\n    return this.doRequest({\n      url: this.url + '/containers/' + container_id + '/messages?data=' + JSON.stringify(request_params),\n      method: 'GET'\n    }).then(response => {\n        var data = [];\n        if (!response.data.result || response.data.result.length == 0) {\n          return {data: data};\n        }\n        // create object to store response data\n        var dict = {}\n        for (var i = 0; i < params.length; i++) {\n          var target = { target: params[i], datapoints: []};\n          dict[params[i]] = target;\n        }\n        // parse response\n        for (var i = 0; i < response.data.result.length; i++) {\n          // for each item in `result` array\n          var item_params = response.data.result[i].params;\n          for (var param in item_params) {\n            // for each param in `params` object, except `time`\n            if (param == \"time\")\n              continue;\n            var target = dict[param]\n            target.datapoints.push([item_params[param], parseInt(item_params.time * 1000)]);\n          }\n        }\n        // format object to send query result\n        for (var param in dict) {\n          data.push(dict[param]);\n        }\n\n        return {data: data};\n      });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/containers/all',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    if (query == \"containers\") {\n      return this.doRequest({\n        url: this.url + '/containers/all',\n        method: 'GET',\n      }).then(response => {\n        const res = [];\n        const data = response.data.result;\n        for (var i = 0; i < data.length; i++) {\n          var label;\n          if (data[i].name == undefined || data[i].name == null) {\n            label = data[i].id;\n          } else {\n            label = data[i].name + ' (' + data[i].id + ')';\n          }\n          res.push({value: data[i].id, text: label});\n        }\n        return res;\n      });\n    }\n    if (query == \"parameters\") {\n      return this.doRequest({\n        url: this.url + '/containers/all?fields=parameters',\n        method: 'GET',\n      }).then(response => {\n        const res = [];\n        const data = response.data.result;\n\n        for (let i = 0; i < data.length; i++) {\n          var parameters = data[i].parameters;\n            for (let j = 0; j < parameters.length; j++) {\n              res.push({value: parameters[j], text: parameters[j]});\n            }\n        }\n        return res;\n      });\n      return { status: \"success\", message: \"Only `containers` and `parameters` queries are supported\", title: \"Choose query\" };\n    }\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    options.targets = _.filter(options.targets, target => {\n      return target.parameter !== 'select parameter';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        parameter: this.templateSrv.replace(target.parameter, options.scopedVars, 'regex')\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}